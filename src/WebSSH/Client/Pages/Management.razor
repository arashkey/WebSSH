@page "/Management"
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http

<h3>Management</h3>
<h4>Connected Sessions</h4>
<div class="row">
    @if (StaticUtils.ActiveSessionsModel != null && StaticUtils.ActiveSessionsModel.Sessions.Count > 0)
    {
        @foreach (var activeSession in StaticUtils.ActiveSessionsModel.Sessions)
        {
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <p>Name: @activeSession.Value.StoredSessionModel.DisplayName</p>
                        <p>Connected Date: @activeSession.Value.StartSessionDate</p>
                        <button class="btn btn-primary btn-sm" @onclick="() => CheckConnectedAndGotoShell(activeSession.Value)">Go To Shell</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => Disconnected(activeSession.Value)">Disconnected</button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    Empty
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Status))
    {
        <div class="card alert alert-danger col-md-12" role="alert">
            @Status
        </div>
    }
</div>

<hr />
<h4>
    Stored Sessions
    <button class="btn btn-primary btn-sm" @onclick="SaveChanges">Save to Local Storage</button>
</h4>
<div class="row">
    @if (ClientStoredSessionsModel != null && ClientStoredSessionsModel.Sessions.Count > 0)
    {
        @foreach (var storedSession in ClientStoredSessionsModel.Sessions)
        {
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <p>Name: @storedSession.DisplayName</p>
                        <p>Host: @storedSession.Host</p>
                        <p>Port: @storedSession.Port</p>
                        <p>User Name: @storedSession.UserName</p>
                        <p>Password: @(string.IsNullOrEmpty(storedSession.Password) ? string.Empty : "**********")</p>
                        <button class="btn btn-primary btn-sm" @onclick="() => GoToConnected(storedSession)">Connected</button>
                        <button class="btn btn-info btn-sm" @onclick="u => EditStoredSession(storedSession)">Edit</button>
                        <button class="btn btn-warning btn-sm" @onclick="u => CopySession(storedSession)">Copy</button>
                        <button class="btn btn-danger btn-sm" @onclick="u => DeleteStoredSession(storedSession)">Delete</button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    Empty
                </div>
            </div>
        </div>
    }
</div>

<hr />

<h5>
    Add or Edit Session Info
    <button type="button" class="btn btn-primary btn-sm" @onclick="SaveConnectInfo">Save Session Info</button>
</h5>
<div class="row">
    <div class="form-group col-md-4">
        <label for="DisplayName">Display Name</label>
        <input type="text" class="form-control" id="DisplayName" autocomplete="off" @bind-value="@ClientStoredSessionModelForEditOrAdd.DisplayName">
    </div>
    <div class="form-group col-md-4">
        <label for="RemoteHost">Remote Host Address</label>
        <input type="text" class="form-control" id="RemoteHost" autocomplete="off" @bind-value="@ClientStoredSessionModelForEditOrAdd.Host">
    </div>
    <div class="form-group col-md-4">
        <label for="Port">Port</label>
        <input type="number" class="form-control" id="Port" autocomplete="off" @bind-value="@ClientStoredSessionModelForEditOrAdd.Port">
    </div>
    <div class="form-group col-md-6">
        <label for="ServerUserName">User Name</label>
        <input type="text" class="form-control" id="ServerUserName" autocomplete="off" @bind-value="@ClientStoredSessionModelForEditOrAdd.UserName">
    </div>
    <div class="form-group  col-md-6">
        <label for="ServerPassword">Password</label>
        <input type="password" class="form-control" id="ServerPassword" autocomplete="new-password" @bind-value="@ClientStoredSessionModelForEditOrAdd.PasswordDecryped">
        <small id="PasswordHelp" class="form-text text-muted">The password will saved as base64 encoding on your local browser</small>
    </div>
</div>

@code {

    public string Status { get; set; }

    ClientStoredSessionModel ClientStoredSessionModelForEditOrAdd { get; set; } = new();

    ClientStoredSessionsModel ClientStoredSessionsModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ClientStoredSessionsModel = await LocalStorage.GetItemAsync<ClientStoredSessionsModel>(nameof(ClientStoredSessionsModel));

        if (ClientStoredSessionsModel == null)
        {
            ClientStoredSessionsModel = new ClientStoredSessionsModel();
        }

        try
        {
            var activeSessionsModel = await Http.GetFromJsonAsync<ServerResponse<List<ActiveSessionModel>>>("/api/Shell/ConnectedSessions");

            if (activeSessionsModel.StausResult == StausResult.Successful)
            {
                StaticUtils.ActiveSessionsModel.RemoveActiveSessions();

                foreach (var activeSession in activeSessionsModel.Response)
                {
                    StaticUtils.ActiveSessionsModel.AddActiveSession(activeSession);
                }
            }
            else
            {
                Status = activeSessionsModel.ExtraMessage;
            }
        }
        catch (Exception ex)
        {
            if (ex is HttpRequestException httpRequestException && httpRequestException.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavManager.NavigateTo("/Login");
            }
            else
            {
                Status = ex.Message;
            }
        }
    }

    async void SaveConnectInfo()
    {
        ClientStoredSessionsModel.AddOrUpdateStoredSessions(ClientStoredSessionModelForEditOrAdd);
        ClientStoredSessionModelForEditOrAdd = new ClientStoredSessionModel();
        await LocalStorage.SetItemAsync<ClientStoredSessionsModel>(nameof(ClientStoredSessionsModel), ClientStoredSessionsModel);
    }

    void EditStoredSession(ClientStoredSessionModel clientStoredSessionModel)
    {
        ClientStoredSessionModelForEditOrAdd = clientStoredSessionModel;
    }

    async void SaveChanges()
    {
        await LocalStorage.SetItemAsync<ClientStoredSessionsModel>(nameof(ClientStoredSessionsModel), ClientStoredSessionsModel);
    }

    void DeleteStoredSession(ClientStoredSessionModel clientStoredSessionModel)
    {
        ClientStoredSessionsModel.RemoveStoredSession(clientStoredSessionModel.UniqueKey);
    }

    void GoToConnected(ClientStoredSessionModel clientStoredSessionModel)
    {
        StaticUtils.ClientStoredSessionModel = clientStoredSessionModel.Clone();
        NavManager.NavigateTo("/Connected");
    }

    void CopySession(ClientStoredSessionModel clientStoredSessionModel)
    {
        ClientStoredSessionModelForEditOrAdd = clientStoredSessionModel.Clone(false);
        ClientStoredSessionModelForEditOrAdd.DisplayName = ClientStoredSessionModelForEditOrAdd.DisplayName + "_Copy";
        ClientStoredSessionsModel.AddOrUpdateStoredSessions(ClientStoredSessionModelForEditOrAdd);
    }

    async void CheckConnectedAndGotoShell(ActiveSessionModel activeSessionModel)
    {
        Status = null;

        try
        {
            var isConnected = await Http.GetFromJsonAsync<ServerResponse<bool>>("/api/Shell/IsConnected?uniqueId=" + activeSessionModel.UniqueKey);
            if (isConnected.StausResult == StausResult.Successful && isConnected.Response)
            {
                NavManager.NavigateTo("/Shell/" + activeSessionModel.UniqueKey);
            }
            else
            {
                StaticUtils.ActiveSessionsModel.RemoveActiveSession(activeSessionModel.UniqueKey);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Status = ex.Message;
            StateHasChanged();
        }
    }

    async void Disconnected(ActiveSessionModel activeSessionModel)
    {
        try
        {
            var disconnected = await Http.GetFromJsonAsync<ServerResponse<bool>>("/api/Shell/Disconnected?uniqueId=" + activeSessionModel.UniqueKey);
            if (disconnected.StausResult == StausResult.Successful && disconnected.Response)
            {
                StaticUtils.ActiveSessionsModel.RemoveActiveSession(activeSessionModel.UniqueKey);
            }
            else
            {
                Status = disconnected.ExtraMessage;
            }
        }
        catch (Exception ex)
        {
            Status = ex.Message;
        }

        StateHasChanged();
    }
}
